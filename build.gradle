group = 'com.satori'
version = '0.9'

apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'maven-publish'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.1.0'
        classpath 'com.sun.codemodel:codemodel:+'
    }
}

import com.sun.codemodel.*
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'commons-io:commons-io:2.5'
    compile 'org.slf4j:slf4j-api:1.7.24'
}

afterEvaluate {
    task generateMetaInfo {
        group "meta"
        description "generate meta information class"
        outputs.upToDateWhen { false }
        def outputDir = file("$buildDir/gen")
        def className = "com.satori.bots.framework.ApiMetaInfo"

        outputs.dir outputDir
        project.sourceSets.main.java.srcDirs += outputDir

        doFirst {
            println "generating class '${className}'..."

            def cm = new JCodeModel()

            def cls = cm._class(className)

            cls.field(
                JMod.PUBLIC | JMod.STATIC | JMod.FINAL,
                String.class, "version", new JStringLiteral(project.version)
            )
            cls.field(
                JMod.PUBLIC | JMod.STATIC | JMod.FINAL,
                String.class, "project", new JStringLiteral(project.name)
            )
            outputDir.mkdirs()
            cm.build(outputDir)
        }
    }
    compileJava.dependsOn(generateMetaInfo)
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.satori'

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives javadocJar, sourceJar
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

tasks.withType(Test) {
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'

    minHeapSize = "128m"
    maxHeapSize = "512m"
    maxParallelForks = 1

    jvmArgs '-XX:MaxPermSize=256m'

    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name 'Satori Bot SDK'
                description 'The API for writing Satori bots'
                url 'https://github.com/satori-com/satori-bots-java-core'

                packaging 'jar'

                scm {
                    url 'https://github.com/satori-com/satori-bots-java-core'
                    connection 'scm:git:git://github.com/satori-com/satori-bots-java-core.git'
                    developerConnection 'scm:git:git@github.com:satori-com/satori-bots-java-core.git'
                }

                licenses {
                    license {
                        name 'The BSD 3-Clause License (with patent grant)'
                        url 'https://raw.githubusercontent.com/satori-com/satori-bots-java-core/master/LICENSE'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'satorisdk'
                        organization = 'Satori Worldwide, Inc.'
                        organizationUrl 'https://www.satori.com'
                        roles { role 'developer' }
                    }
                }
            }
        }
    }
}

